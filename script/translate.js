const createPrompt = (text) => {
  return `Cho b·∫°n ƒëo·∫°n vƒÉn b·∫£n: "${text}".
               H√£y d·ªãch ƒëo·∫°n vƒÉn b·∫£n ƒë√≥ th√†nh Ti·∫øng Vi·ªát (Vietnamese) v·ªõi c√°c ƒëi·ªÅu ki·ªán sau:
               - Tu√¢n th·ªß ch·∫∑t ch·∫Ω b·ªëi c·∫£nh v√† s·∫Øc th√°i ban ƒë·∫ßu.
               - S·ª± l∆∞u lo√°t t·ª± nhi√™n nh∆∞ ng∆∞·ªùi b·∫£n x·ª©.
               - Kh√¥ng c√≥ th√™m gi·∫£i th√≠ch/di·ªÖn gi·∫£i.
               - B·∫£o to√†n thu·∫≠t ng·ªØ 1:1 cho c√°c thu·∫≠t ng·ªØ/danh t·ª´ ri√™ng.
               Ch·ªâ in ra b·∫£n d·ªãch m√† kh√¥ng c√≥ d·∫•u ngo·∫∑c k√©p.`;
}

const translateWithGemini = async (text, apiKey, outputTextElement) => {
  let url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent?key=${apiKey}`;

  let requestBody = {
    contents: [{ parts: [{ text: createPrompt(text) }] }]
  };

  // üü¢ Hi·ªÉn th·ªã popup "ƒêang d·ªãch..."
  outputTextElement.innerText = "ƒêang d·ªãch...";

  try {
    let response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      outputTextElement.innerText = `L·ªói HTTP: ${response.status}`;
    }

    let result = await response.json();
    console.log("K·∫øt qu·∫£ API:", result);

    if (result && result.candidates && result.candidates.length > 0) {
      let translatedText = result.candidates[0].content.parts[0].text;
      outputTextElement.innerText = translatedText; // üü¢ C·∫≠p nh·∫≠t popup v·ªõi b·∫£n d·ªãch
    } else {
      outputTextElement.innerText = "L·ªói: API kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá.";
    }
  } catch (error) {
    console.error("L·ªói khi g·ªçi API:", error);
    outputTextElement.innerText = "L·ªói khi g·ªçi API: " + error.message;
  }
};