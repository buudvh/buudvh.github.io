const createPrompt = (text) => {
  // return `Cho b·∫°n ƒëo·∫°n vƒÉn b·∫£n: "${text}".
  //              H√£y d·ªãch ƒëo·∫°n vƒÉn b·∫£n ƒë√≥ th√†nh Ti·∫øng Vi·ªát (Vietnamese) v·ªõi c√°c ƒëi·ªÅu ki·ªán sau:
  //              - Tu√¢n th·ªß ch·∫∑t ch·∫Ω b·ªëi c·∫£nh v√† s·∫Øc th√°i ban ƒë·∫ßu.
  //              - S·ª± l∆∞u lo√°t t·ª± nhi√™n nh∆∞ ng∆∞·ªùi b·∫£n x·ª©.
  //              - Kh√¥ng c√≥ th√™m gi·∫£i th√≠ch/di·ªÖn gi·∫£i.
  //              - B·∫£o to√†n thu·∫≠t ng·ªØ 1:1 cho c√°c thu·∫≠t ng·ªØ/danh t·ª´ ri√™ng.
  //              Ch·ªâ in ra b·∫£n d·ªãch m√† kh√¥ng c√≥ d·∫•u ngo·∫∑c k√©p.`;
  return ` B·∫°n l√† m·ªôt chuy√™n gia ng√¥n ng·ªØ chuy√™n v·ªÅ ti·∫øng Trung, ti·∫øng Vi·ªát, ti·∫øng Nh·∫≠t v√† ti·∫øng Anh. 
          Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch c·ª•m t·ª´ ti·∫øng Trung ƒë∆∞·ª£c cung c·∫•p v√† ƒë∆∞a ra m·ªôt gi·∫£i th√≠ch to√†n di·ªán b·∫±ng ti·∫øng Vi·ªát,
          t·∫≠p trung v√†o s·∫Øc th√°i v√† b·ªëi c·∫£nh vƒÉn h√≥a c·ªßa n√≥.

          Ph√¢n t√≠ch c·ª•m t·ª´ ti·∫øng Trung sau: "${text}"

          Ph√¢n t√≠ch c·ªßa b·∫°n *ph·∫£i* bao g·ªìm nh·ªØng ƒëi·ªÅu sau, ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ch√≠nh x√°c nh∆∞ sau:

          1.  **√ù nghƒ©a v√† c√°ch s·ª≠ d·ª•ng trong ti·∫øng Vi·ªát:**
              *   Cung c·∫•p m·ªôt gi·∫£i th√≠ch *ng·∫Øn g·ªçn v√† th√†nh ng·ªØ* v·ªÅ √Ω nghƒ©a c·ªßa c·ª•m t·ª´ trong ti·∫øng Vi·ªát. C√¢n nh·∫Øc c√°c bi·∫øn th·ªÉ v√πng mi·ªÅn n·∫øu c√≥.
              *   M√¥ t·∫£ *c√°c ng·ªØ c·∫£nh th·ª±c t·∫ø, ƒëi·ªÉn h√¨nh* m√† c·ª•m t·ª´ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong giao ti·∫øp ho·∫∑c vƒÉn b·∫£n ti·∫øng Vi·ªát.

          2.  **V√≠ d·ª• (n·∫øu c√≥):**
              *   Cung c·∫•p *m·ªôt* c√¢u v√≠ d·ª• *li√™n quan* b·∫±ng ti·∫øng Trung c√≥ ch·ª©a c·ª•m t·ª´ ƒë√≥.
              *   Cung c·∫•p m·ªôt b·∫£n d·ªãch ti·∫øng Vi·ªát *t·ª± nhi√™n v√† ch√≠nh x√°c* c·ªßa c√¢u v√≠ d·ª• ƒë√≥.

          3.  **Danh t·ª´ ri√™ng (n·∫øu c√≥):**
              *   N·∫øu c·ª•m t·ª´ ƒë·∫°i di·ªán cho m·ªôt danh t·ª´ ri√™ng n∆∞·ªõc ngo√†i ƒë∆∞·ª£c phi√™n √¢m (v√≠ d·ª•: ti·∫øng Nh·∫≠t ho·∫∑c ti·∫øng Anh), h√£y x√°c ƒë·ªãnh c·∫©n th·∫≠n (c√°c) thu·∫≠t ng·ªØ g·ªëc.
              * Ho·∫∑c gi·∫£ ƒë·ªãnh n·∫øu n√≥ l√† phi√™n √¢m t√™n ri√™ng n∆∞·ªõc ngo√†i (ti·∫øng Nh·∫≠t, ti·∫øng Anh) h√£y cho t√¥i c√°ch ƒë·ªçc c·ªßa n√≥ ƒë∆∞·ª£c vi·∫øt b·∫±ng Romanji
              *   ƒê·ªëi v·ªõi m·ªói danh t·ª´ ri√™ng ƒë√£ x√°c ƒë·ªãnh:
                  *   Li·ªát k√™ c√°c thu·∫≠t ng·ªØ g·ªëc ti·∫øng Nh·∫≠t v√† d·∫°ng Romanji *Hepburn ti√™u chu·∫©n* c·ªßa n√≥.
                  *   Li·ªát k√™ c√°c thu·∫≠t ng·ªØ g·ªëc ti·∫øng Anh.
              * Ch·ªâ li·ªát k√™ t√™n m√† kh√¥ng c·∫ßn gi·∫£i th√≠ch g√¨ th√™m

          ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n m·ªôt c√°ch r√µ r√†ng v√† ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát, *s·ª≠ d·ª•ng m·∫´u ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh b√™n d∆∞·ªõi*. Tu√¢n th·ªß nghi√™m ng·∫∑t ƒë·ªãnh d·∫°ng n√†y:

          √ù nghƒ©a:
          [Di·ªÖn gi·∫£i ng·∫Øn g·ªçn, t·ª± nhi√™n v·ªÅ √Ω nghƒ©a c·ªßa c·ª•m t·ª´]
          Ng·ªØ c·∫£nh:
          [M√¥ t·∫£ ng·ªØ c·∫£nh th·ª±c t·∫ø m√† c·ª•m t·ª´ th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng]

          V√≠ d·ª• (n·∫øu c√≥):
          - "[C√¢u ti·∫øng Trung ch·ª©a c·ª•m t·ª´]"
          - "[B·∫£n d·ªãch ti·∫øng Vi·ªát t·ª± nhi√™n v√† ch√≠nh x√°c]"

          Danh s√°ch c√°c danh t·ª´ ri√™ng (n·∫øu c√≥):
          * Danh t·ª´ ri√™ng: [C·ª•m t·ª´ ti·∫øng Trung]
              - [T√™n ti·∫øng Nh·∫≠t 1 vi·∫øt b·∫±ng Romanji theo h·ªá Hepburn]
              - [T√™n ti·∫øng Nh·∫≠t 2 vi·∫øt b·∫±ng Romanji theo h·ªá Hepburn]
              ...........
              - [T√™n ti·∫øng Anh]
              - [T√™n ti·∫øng Anh - kh√¥ng c√≥ th√¨ kh√¥ng hi·ªÉn th·ªã d√≤ng n√†y]
              ...........
            `;
}

const translateWithGemini = async (text, apiKey, outputTextElement, useDefaultPrompt) => {
  let url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent?key=${apiKey}`;

  let requestBody = {
    contents: [{ parts: [{ text: useDefaultPrompt ? createPrompt(text) : text }] }]
  };

  // üü¢ Hi·ªÉn th·ªã popup "ƒêang d·ªãch..."
  outputTextElement.innerText = "ƒêang d·ªãch...";

  try {
    let response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      outputTextElement.innerText = `L·ªói HTTP: ${response.status}`;
    }

    let result = await response.json();
    console.log("K·∫øt qu·∫£ API:", result);

    if (result && result.candidates && result.candidates.length > 0) {
      let translatedText = result.candidates[0].content.parts[0].text;
      outputTextElement.innerText = translatedText; // üü¢ C·∫≠p nh·∫≠t popup v·ªõi b·∫£n d·ªãch
    } else {
      outputTextElement.innerText = "L·ªói: API kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá.";
    }
  } catch (error) {
    console.error("L·ªói khi g·ªçi API:", error);
    outputTextElement.innerText = "L·ªói khi g·ªçi API: " + error.message;
  }
};

async function translateText() {
  const inputTextElement = document.getElementById('inputText');
  const outputTextElement = document.getElementById('outputText');
  const hanViet = document.getElementById('hanViet');

  const key = document.getElementById("inputKey").value;
  if (key.trim() === '') {
    outputTextElement.innerHTML = 'Vui l√≤ng nh·∫≠p key Gemini.';
    return;
  }

  const inputText = inputTextElement.value;
  if (inputText.trim() === '') {
    outputTextElement.innerHTML = 'Vui l√≤ng nh·∫≠p ti·∫øng Trung.';
    return;
  }


  translateWithGemini(inputText, key, outputTextElement, document.getElementById("inputDefaultPrompt").checked);
}

function copyText() {
  const outputTextElement = document.getElementById('outputText');
  const range = document.createRange();
  range.selectNode(outputTextElement);
  window.getSelection().removeAllRanges();
  window.getSelection().addRange(range);
  document.execCommand('copy');
  window.getSelection().removeAllRanges();

  showCopyMessage();  // Hi·ªÉn th·ªã th√¥ng b√°o khi ƒë√£ sao ch√©p
}

function showCopyMessage() {
  const copyMessageElement = document.getElementById('copyMessage');
  copyMessageElement.textContent = 'ƒê√£ sao ch√©p!';
}

function clearCopyMessage() {
  const copyMessageElement = document.getElementById('copyMessage');
  copyMessageElement.textContent = '';
}